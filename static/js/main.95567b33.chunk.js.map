{"version":3,"sources":["lib/providers/Provider.js","lib/hooks/useMathJax.js","lib/index.js","lib/components/Formula.js","lib/components/Html.js","examples/formula/CustomInput.js","serviceWorker.js","index.js"],"names":["MathJaxContext","createContext","DEFAULT_OPTIONS","DEFAULT_URL","useMathJax","MathJax","useContext","updateMathContent","typesetPromise","catch","e","TypeError","isTypeError","console","log","useEffect","Provider","props","url","options","useState","setMathJax","isMathJaxLoaded","setIsMathJaxLoaded","onLoad","window","onErr","err","loadScript","then","value","Formula","formula","Html","html","dangerouslySetInnerHTML","__html","CustomInput","setValue","className","type","onChange","target","style","width","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yLAGMA,EAAiBC,wBAAc,MAgC/BC,EAAkB,GAClBC,EACJ,kEClCWC,EAAa,WACxB,IAAMC,EDmC+BC,qBAAWN,GC7BhD,SAASO,IACPF,GACEA,EAAQG,iBAAiBC,OAAM,SAACC,IAKpC,SAAqBA,GACnB,OAAOA,aAAaC,WALXC,CAAYF,IAAIG,QAAQC,IAAIJ,MAQvC,OAfAK,qBAAU,WACRR,OAcK,CAACF,EAASE,IClBnB,IAMeF,EANC,CACdW,SFCe,SAACC,GAChB,IAAMC,EAAMD,EAAMC,KAAOf,EACnBgB,EAAUF,EAAME,SAAWjB,EAFP,EAIIkB,mBAASD,GAJb,mBAInBd,EAJmB,KAIVgB,EAJU,OAKoBD,oBAAS,GAL7B,mBAKnBE,EALmB,KAKFC,EALE,KAa1B,SAASC,IACPH,EAAWI,OAAOpB,SAClBkB,GAAmB,GAGrB,SAASG,EAAMC,GACbd,QAAQC,IAAIa,GAGd,OAfAF,OAAOpB,QAAUA,EAEjBU,qBAAU,WACRa,IAAWV,GAAKW,KAAKL,GAAQf,MAAMiB,KAClC,CAACR,IAYF,kBAAClB,EAAegB,SAAhB,eACEc,MAAOR,EAAkBjB,EAAU,MAC/BY,KEzBRc,QCFa,YAA+B,IAAZC,EAAW,EAAXA,QAAW,EACN5B,IADM,mBACpCC,EADoC,KAC3BE,EAD2B,KAO3C,OAJAQ,qBAAU,WACRR,OAGGF,EAEE,6BAAM2B,GAFQ,MDJrBC,KEHa,YAAyB,IAATC,EAAQ,EAARA,KAAQ,EACA9B,IADA,mBAC9BC,EAD8B,KACrBE,EADqB,KAOrC,OAJAQ,qBAAU,WACRR,OAGGF,EAEE,yBAAK8B,wBAAyB,CAAEC,OAAQF,KAF1B,OCORG,MAdf,WAAwB,IAAD,EACKjB,mBAAS,0DADd,mBACdU,EADc,KACPQ,EADO,KAGrB,OACE,yBAAKC,UAAU,OACb,iDACA,2BAAOC,KAAK,OAAOV,MAAOA,EAAOW,SAAU,SAAC/B,GAAD,OAAO4B,EAAS5B,EAAEgC,OAAOZ,QAAQa,MAAO,CAACC,MAAO,UAC3F,kBAAC,EAAQ5B,SAAT,KACE,kBAAC,EAAQe,QAAT,CAAiBC,QAAS,KAAOF,EAAQ,UCC7Be,QACW,cAA7BpB,OAAOqB,SAASC,UAEe,UAA7BtB,OAAOqB,SAASC,UAEhBtB,OAAOqB,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,MAAK,SAAA2B,GACjCA,EAAaC,iB","file":"static/js/main.95567b33.chunk.js","sourcesContent":["import loadScript from \"simple-load-script\";\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\n\nconst MathJaxContext = createContext(null);\n\nconst Provider = (props) => {\n  const url = props.url || DEFAULT_URL;\n  const options = props.options || DEFAULT_OPTIONS;\n\n  const [MathJax, setMathJax] = useState(options);\n  const [isMathJaxLoaded, setIsMathJaxLoaded] = useState(false);\n\n  window.MathJax = MathJax;\n\n  useEffect(() => {\n    loadScript(url).then(onLoad).catch(onErr);\n  }, [url]);\n\n  function onLoad() {\n    setMathJax(window.MathJax);\n    setIsMathJaxLoaded(true);\n  }\n\n  function onErr(err) {\n    console.log(err);\n  }\n\n  return (\n    <MathJaxContext.Provider\n      value={isMathJaxLoaded ? MathJax : null}\n      {...props}\n    />\n  );\n};\n\nconst DEFAULT_OPTIONS = {};\nconst DEFAULT_URL =\n  \"https://cdn.jsdelivr.net/npm/mathjax@3.0.1/es5/tex-mml-chtml.js\";\n\nexport const useMathJaxContext = () => useContext(MathJaxContext);\n\nexport default Provider;\n","import { useEffect } from \"react\";\nimport { useMathJaxContext } from \"../providers/Provider\";\n\nexport const useMathJax = () => {\n  const MathJax = useMathJaxContext();\n\n  useEffect(() => {\n    updateMathContent();\n  });\n\n  function updateMathContent() {\n    MathJax &&\n      MathJax.typesetPromise().catch((e) => {\n        if (!isTypeError(e)) console.log(e);\n      });\n  }\n\n  function isTypeError(e) {\n    return e instanceof TypeError; // MathJax unhandled type error bug\n  }\n\n  return [MathJax, updateMathContent];\n};\n","import { Provider } from './providers';\nimport { Formula, Html } from './components';\n\nconst MathJax = {\n  Provider,\n  Formula,\n  Html,\n}\n\nexport default MathJax;","import React, { useEffect } from \"react\";\nimport { useMathJax } from \"../hooks\";\n\nexport default function Formula({ formula }) {\n  const [MathJax, updateMathContent] = useMathJax();\n\n  useEffect(() => {\n    updateMathContent();\n  });\n\n  if (!MathJax) return null;\n\n  return <div>{formula}</div>;\n}\n","import React, { useEffect } from \"react\";\nimport { useMathJax } from \"../hooks\";\n\nexport default function Html({ html }) {\n  const [MathJax, updateMathContent] = useMathJax();\n\n  useEffect(() => {\n    updateMathContent();\n  });\n\n  if (!MathJax) return null;\n\n  return <div dangerouslySetInnerHTML={{ __html: html }}></div>;\n}\n","import React, { useState } from \"react\";\nimport MathJax from \"../../lib\";\n\nfunction CustomInput() {\n  const [value, setValue] = useState(\"\\\\int_{-\\\\infty}^{+\\\\infty} e^{-x^2} dx = \\\\sqrt{\\\\pi}\");\n\n  return (\n    <div className=\"App\">\n      <h1>Custom Math Input</h1>\n      <input type=\"text\" value={value} onChange={(e) => setValue(e.target.value)} style={{width: '100%'}}/>\n      <MathJax.Provider>\n        <MathJax.Formula formula={\"$$\" + value + \"$$\"} />\n      </MathJax.Provider>\n    </div>\n  );\n}\n\nexport default CustomInput;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./examples/formula/CustomInput\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}